1. Insert Node At The Beginning

Node* insertAtFirst(Node* list, int newValue) {
    // Write your code here
    Node* head = new Node();
    Node* temp = new Node();
    temp = list;
    head->data = newValue;
    head->next = temp;
    temp=head;
    
    return temp;
    
}

2.Delete Node in a Linked List

class Solution {
public:
    void deleteNode(ListNode* node) {
        node->val = node->next->val;
        node->next = node->next->next;
    }
};

3.Count nodes of linked list

int length(Node *head)
{
    int c=1;
    Node* temp = new Node();
    temp = head;

    while(temp->next != NULL){
        c++;
        temp=temp->next;
    }

    return c;
}

4. Search in a Linked List

int searchInLinkedList(Node<int> *head, int k) {
    // Write your code here.
    int flag;
    // Node<int> *temp = new Node<int>();
    // temp = head;
    while(head!= NULL){
      if (head->data == k) {
        return 1;
      }
      head = head->next;
    }
    return 0;
}

5. Introduction To Doubly Linked List

Node* constructLL(vector<int>& arr) {
    // Write your code here
    Node* head = new Node();
    
    head->data=arr[arr.size()-1];

    for(int i = arr.size()-2; i>=0 ; i--){
        Node* temp = new Node();
        temp->data=arr[i];
        temp->next=head;
        head=temp;

    }
    return head;
}

6. Doubly linked list Insertion at given position

void addNode(Node *head, int pos, int data)
{
   // Your code here
    while ( pos-- ) {
        head = head->next;
    }
    Node* node = new Node(data);
    node->prev = head;
    node->next = head->next;
    head->next = node;
   
}

7. Insert at end of Doubly Linked List

Node * insertAtTail(Node *head, int k) {
   Node* curr = new Node(k);
    if(head == NULL)
    return curr;
    Node* temp = head;
    
    while(temp->next!=NULL){
        temp = temp-> next;
    }
    temp->next= curr;
    temp->prev = head;
    curr->prev=temp;
    curr->next=NULL;
    return head;
}

8. Delete Last Node of a Doubly Linked List

Node * deleteLastNode(Node *head) {
    if (head->next == NULL) {
      return NULL;
    } 
      Node *temp = head;
      while (temp->next != NULL) {
        temp = temp->next;
      }
      Node *curr = temp->prev;
      curr->next = NULL;
    //   temp->prev = NULL;
    
    return head;
    
}

9. Reverse A Doubly Linked List

Node* reverseDLL(Node* head)
{   
    // Write your code here  
    Node* temp= head; 
    Node* curr= new Node();
    Node* prev= NULL;
    while(temp){
        // temp->next=NULL;
        curr=temp->next;
        temp->next=prev;
        temp->prev = curr;
       prev = temp;
    temp = curr;
    } 
    return prev;
}

